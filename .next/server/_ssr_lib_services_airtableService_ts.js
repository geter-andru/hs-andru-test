"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_services_airtableService_ts";
exports.ids = ["_ssr_lib_services_airtableService_ts"];
exports.modules = {

/***/ "(ssr)/./lib/services/airtableService.ts":
/*!*****************************************!*\
  !*** ./lib/services/airtableService.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   airtableService: () => (/* binding */ airtableService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Airtable Service for Next.js Platform\n// Based on React SPA's airtableService.js patterns\nclass AirtableService {\n    constructor(){\n        this.config = {\n            apiKey: \"your_airtable_api_key_here\" || 0,\n            baseId: 'app0jJkgTCqn46vp9',\n            tables: {\n                customerAssets: 'Customer Assets',\n                userProgress: 'User Progress',\n                customerActions: 'Customer Actions'\n            }\n        };\n    }\n    // Parse JSON content safely with fallbacks\n    parseJSONContent(content, fallback = null) {\n        if (!content) return fallback;\n        try {\n            return JSON.parse(content);\n        } catch (error) {\n            console.warn('Failed to parse JSON content:', error);\n            return fallback;\n        }\n    }\n    // Get customer assets with enhanced error handling\n    async getCustomerAssets(customerId, accessToken) {\n        try {\n            // Return mock data structure matching React SPA format\n            const mockData = {\n                customerId,\n                customerName: this.getCustomerName(customerId),\n                accessToken: accessToken || 'mock-token',\n                icpContent: this.getMockICPContent(),\n                costCalculatorContent: this.getMockCostCalculatorContent(),\n                businessCaseContent: this.getMockBusinessCaseContent(),\n                createdAt: new Date().toISOString(),\n                lastAccessed: new Date().toISOString(),\n                toolAccessStatus: JSON.stringify({\n                    icp: true,\n                    costCalculator: true,\n                    businessCase: true\n                }),\n                professionalMilestones: JSON.stringify({\n                    achievements: [\n                        {\n                            title: \"Strategic Account Growth\",\n                            description: \"Increased enterprise deal closure rate by 35%\",\n                            date: \"2024-08-01\",\n                            impact: \"$2.3M additional revenue\"\n                        }\n                    ],\n                    currentGoals: [\n                        \"Scale personalized outreach program\",\n                        \"Implement advanced lead scoring\"\n                    ],\n                    nextMilestone: {\n                        target: \"Q4 2024\",\n                        goal: \"Launch AI-powered customer intelligence platform\"\n                    }\n                }),\n                dailyObjectives: JSON.stringify({\n                    today: [\n                        {\n                            priority: \"high\",\n                            task: \"Review top 5 enterprise prospects\",\n                            timeBlock: \"9:00-10:30\",\n                            outcome: \"Identify 2 qualified opportunities\"\n                        }\n                    ],\n                    thisWeek: [\n                        \"Complete strategic account audit\",\n                        \"Finalize Q4 pipeline review\"\n                    ],\n                    metrics: {\n                        completionRate: 85,\n                        focusTime: \"6.5 hours\",\n                        keyResults: 3\n                    }\n                })\n            };\n            return mockData;\n        } catch (error) {\n            console.error('Failed to get customer assets:', error);\n            throw new Error(`Failed to load customer data: ${error}`);\n        }\n    }\n    // Get user progress data\n    async getUserProgress(customerId, toolName) {\n        try {\n            // Return mock progress data\n            return {\n                customerId,\n                toolName,\n                progressData: JSON.stringify({\n                    completionStatus: \"in_progress\",\n                    timeSpent: 1200,\n                    lastAccessed: new Date().toISOString(),\n                    sessionCount: 3,\n                    sectionsCompleted: 2\n                }),\n                updatedAt: new Date().toISOString()\n            };\n        } catch (error) {\n            console.error('Failed to get user progress:', error);\n            throw new Error(`Failed to load progress data: ${error}`);\n        }\n    }\n    // Save user progress\n    async saveUserProgress(customerId, toolName, progressData) {\n        try {\n            // In real implementation, this would save to Airtable\n            console.log('Saving user progress:', {\n                customerId,\n                toolName,\n                progressData\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to save user progress:', error);\n            return false;\n        }\n    }\n    // Track customer actions (from React SPA pattern)\n    async trackAction(customerId, actionType, actionData) {\n        try {\n            // In real implementation, this would save to Airtable Customer Actions table\n            console.log('Tracking action:', {\n                customerId,\n                actionType,\n                actionData\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to track action:', error);\n            return false;\n        }\n    }\n    // Helper methods for mock data\n    getCustomerName(customerId) {\n        const customerNames = {\n            'CUST_2': 'John Demo',\n            'CUST_4': 'Admin Demo',\n            'dru78DR9789SDF862': 'Geter',\n            'CUST_02': 'Test User'\n        };\n        return customerNames[customerId] || 'Customer';\n    }\n    getMockICPContent() {\n        return {\n            title: \"Ideal Customer Profile Framework\",\n            description: \"Your comprehensive guide to identifying and rating ideal customers\",\n            segments: [\n                {\n                    name: \"Enterprise SaaS Companies\",\n                    score: 95,\n                    criteria: [\n                        \"500+ employees\",\n                        \"$50M+ annual revenue\",\n                        \"Tech-forward culture\",\n                        \"Rapid growth phase\"\n                    ],\n                    keyIndicators: [\n                        \"Experiencing scalability challenges\",\n                        \"Active digital transformation initiatives\",\n                        \"Budget allocated for technology solutions\"\n                    ]\n                },\n                {\n                    name: \"Mid-Market Tech Companies\",\n                    score: 85,\n                    criteria: [\n                        \"100-500 employees\",\n                        \"$10M-50M revenue\",\n                        \"Digital transformation focus\"\n                    ],\n                    keyIndicators: [\n                        \"Manual processes limiting growth\",\n                        \"Technical team seeking automation\",\n                        \"Revenue operations investment\"\n                    ]\n                }\n            ],\n            ratingCriteria: [\n                {\n                    name: \"Company Size\",\n                    weight: 25,\n                    description: \"Employee count and organizational structure\"\n                },\n                {\n                    name: \"Financial Health\",\n                    weight: 30,\n                    description: \"Revenue, growth rate, and available budget\"\n                },\n                {\n                    name: \"Technology Readiness\",\n                    weight: 25,\n                    description: \"Current tech stack and digital maturity\"\n                },\n                {\n                    name: \"Market Timing\",\n                    weight: 20,\n                    description: \"Growth stage and market conditions\"\n                }\n            ]\n        };\n    }\n    getMockCostCalculatorContent() {\n        return {\n            title: \"Cost of Inaction Calculator Framework\",\n            description: \"Calculate the true financial impact of delayed decision-making and missed opportunities\",\n            categories: [\n                {\n                    name: \"Lost Revenue Opportunities\",\n                    formula: \"(potentialDeals * averageDealSize * conversionRate) * (delayMonths / 12)\",\n                    description: \"Revenue lost due to delayed sales cycles\"\n                },\n                {\n                    name: \"Operational Inefficiencies\",\n                    formula: \"currentOperatingCost * inefficiencyRate * timeDelay\",\n                    description: \"Costs from maintaining inefficient processes\"\n                },\n                {\n                    name: \"Competitive Disadvantage\",\n                    formula: \"marketShare * averageRevenue * competitorAdvantageRate\",\n                    description: \"Market position erosion to competitors\"\n                },\n                {\n                    name: \"Productivity Losses\",\n                    formula: \"employeeCount * averageSalary * productivityLossRate * timeDelay\",\n                    description: \"Employee time wasted on manual processes\"\n                }\n            ],\n            defaultValues: {\n                averageDealSize: 25000,\n                conversionRate: 0.15,\n                inefficiencyRate: 0.12,\n                competitorAdvantageRate: 0.08,\n                productivityLossRate: 0.05\n            },\n            scenarios: [\n                {\n                    name: \"Conservative\",\n                    multiplier: 0.8\n                },\n                {\n                    name: \"Realistic\",\n                    multiplier: 1.0\n                },\n                {\n                    name: \"Aggressive\",\n                    multiplier: 1.3\n                }\n            ]\n        };\n    }\n    getMockBusinessCaseContent() {\n        return {\n            title: \"Business Case Builder Templates\",\n            description: \"Pre-built templates and frameworks for creating compelling pilot-to-contract proposals\",\n            templates: [\n                {\n                    name: \"Pilot Program Proposal\",\n                    duration: \"3-6 months\",\n                    investment: \"$25,000-$75,000\",\n                    sections: [\n                        \"Executive Summary\",\n                        \"Problem Statement\",\n                        \"Proposed Solution\",\n                        \"Success Metrics\",\n                        \"Investment & ROI\",\n                        \"Next Steps\"\n                    ],\n                    keyPoints: [\n                        \"Low-risk evaluation period\",\n                        \"Measurable success criteria\",\n                        \"Clear path to full implementation\"\n                    ]\n                },\n                {\n                    name: \"Full Implementation Business Case\",\n                    duration: \"6-18 months\",\n                    investment: \"$100,000-$500,000\",\n                    sections: [\n                        \"Strategic Alignment\",\n                        \"Current State Analysis\",\n                        \"Solution Architecture\",\n                        \"Financial Projections\",\n                        \"Risk Assessment\",\n                        \"Implementation Timeline\"\n                    ],\n                    keyPoints: [\n                        \"Comprehensive transformation\",\n                        \"Long-term value creation\",\n                        \"Competitive advantage\"\n                    ]\n                }\n            ],\n            frameworks: [\n                {\n                    name: \"ROI Calculation\",\n                    formula: \"(Benefits - Costs) / Costs * 100\",\n                    components: [\n                        \"Direct cost savings\",\n                        \"Revenue increases\",\n                        \"Productivity gains\",\n                        \"Risk mitigation value\"\n                    ]\n                },\n                {\n                    name: \"Payback Period\",\n                    formula: \"Initial Investment / Annual Benefits\",\n                    benchmark: \"Target: 12-18 months\"\n                }\n            ],\n            successMetrics: [\n                {\n                    category: \"Financial\",\n                    metrics: [\n                        \"Cost reduction %\",\n                        \"Revenue increase %\",\n                        \"ROI %\",\n                        \"Payback period\"\n                    ]\n                },\n                {\n                    category: \"Operational\",\n                    metrics: [\n                        \"Process efficiency gains\",\n                        \"Error reduction %\",\n                        \"Time savings\",\n                        \"User adoption rate\"\n                    ]\n                },\n                {\n                    category: \"Strategic\",\n                    metrics: [\n                        \"Market share growth\",\n                        \"Competitive advantage\",\n                        \"Innovation capacity\",\n                        \"Scalability improvement\"\n                    ]\n                }\n            ]\n        };\n    }\n    // Enhanced methods from React SPA\n    async searchCustomers(query) {\n        try {\n            // In real implementation, this would search Airtable\n            const mockResults = [\n                {\n                    customerId: 'CUST_2',\n                    customerName: 'John Demo',\n                    accessToken: 'demo-token'\n                }\n            ];\n            return mockResults.filter((customer)=>customer.customerName.toLowerCase().includes(query.toLowerCase()) || customer.customerId.toLowerCase().includes(query.toLowerCase()));\n        } catch (error) {\n            console.error('Failed to search customers:', error);\n            return [];\n        }\n    }\n    async updateCustomerAssets(customerId, updates) {\n        try {\n            // In real implementation, this would update Airtable record\n            console.log('Updating customer assets:', {\n                customerId,\n                updates\n            });\n            return true;\n        } catch (error) {\n            console.error('Failed to update customer assets:', error);\n            return false;\n        }\n    }\n    async createCustomerAssets(customerData) {\n        try {\n            // In real implementation, this would create new Airtable record\n            console.log('Creating customer assets:', customerData);\n            return true;\n        } catch (error) {\n            console.error('Failed to create customer assets:', error);\n            return false;\n        }\n    }\n    // Health check method\n    async healthCheck() {\n        try {\n            // In real implementation, this would ping Airtable API\n            return {\n                status: 'healthy',\n                message: 'Airtable service is operational'\n            };\n        } catch (error) {\n            return {\n                status: 'unhealthy',\n                message: `Airtable service error: ${error}`\n            };\n        }\n    }\n    // Update last accessed timestamp for a customer\n    async updateLastAccessed(customerId) {\n        try {\n            console.log(`🕐 Updating last accessed time for customer: ${customerId}`);\n            // In real implementation, this would update the lastAccessed field in Airtable\n            // For now, just log the action\n            const timestamp = new Date().toISOString();\n            console.log(`✅ Last accessed updated to: ${timestamp}`);\n        // Future implementation would do:\n        // await this.updateCustomerAssets(customerId, { lastAccessed: timestamp });\n        } catch (error) {\n            console.error('Failed to update last accessed time:', error);\n        // Don't throw - this is a non-critical operation\n        }\n    }\n}\n// Export singleton instance\nconst airtableService = new AirtableService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (airtableService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/services/airtableService.ts\n");

/***/ })

};
;