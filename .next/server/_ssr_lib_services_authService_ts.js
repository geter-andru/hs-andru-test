"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_services_authService_ts";
exports.ids = ["_ssr_lib_services_authService_ts"];
exports.modules = {

/***/ "(ssr)/./lib/services/authService.ts":
/*!*************************************!*\
  !*** ./lib/services/authService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authService: () => (/* binding */ authService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-cookie */ \"(ssr)/./node_modules/js-cookie/dist/js.cookie.mjs\");\n/* harmony import */ var _supabase_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../supabase/client */ \"(ssr)/./lib/supabase/client.ts\");\n// Enhanced Auth Service for Next.js Platform\n// Based on React SPA's authService.js patterns with Supabase integration\n\n\nclass AuthService {\n    constructor(){\n        this.session = null;\n        // Cookie names\n        this.TOKEN_COOKIE = 'hs_auth_token';\n        this.REFRESH_COOKIE = 'hs_refresh_token';\n        this.CUSTOMER_ID_COOKIE = 'hs_customer_id';\n        this.SESSION_COOKIE = 'hs_session';\n        if (AuthService.instance) {\n            return AuthService.instance;\n        }\n        AuthService.instance = this;\n        this.loadSessionFromStorage();\n    }\n    // Load session from cookies on initialization\n    loadSessionFromStorage() {\n        if (true) return;\n        try {\n            const sessionData = js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(this.SESSION_COOKIE);\n            if (sessionData) {\n                this.session = JSON.parse(sessionData);\n                // Validate session hasn't expired\n                if (this.session && this.session.expiresAt < Date.now()) {\n                    this.clearSession();\n                }\n            }\n        } catch (error) {\n            console.warn('Failed to load session from storage:', error);\n            this.clearSession();\n        }\n    }\n    // Save session to cookies\n    saveSessionToStorage(session) {\n        if (true) return;\n        try {\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(this.TOKEN_COOKIE, session.accessToken, {\n                expires: 1\n            });\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(this.REFRESH_COOKIE, session.refreshToken, {\n                expires: 7\n            });\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(this.CUSTOMER_ID_COOKIE, session.customerId, {\n                expires: 7\n            });\n            js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].set(this.SESSION_COOKIE, JSON.stringify(session), {\n                expires: 1\n            });\n        } catch (error) {\n            console.error('Failed to save session to storage:', error);\n        }\n    }\n    // Clear session from cookies\n    clearSession() {\n        this.session = null;\n        if (true) return;\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this.TOKEN_COOKIE);\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this.REFRESH_COOKIE);\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this.CUSTOMER_ID_COOKIE);\n        js_cookie__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this.SESSION_COOKIE);\n    }\n    // Supabase authentication methods\n    async loginWithSupabase() {\n        try {\n            const supabaseUser = await (0,_supabase_client__WEBPACK_IMPORTED_MODULE_1__.getCurrentUser)();\n            if (!supabaseUser) {\n                return {\n                    success: false,\n                    error: 'No Supabase user found. Please sign in.'\n                };\n            }\n            // Create customer profile from Supabase user\n            const customer = {\n                id: 'SUPABASE_USER',\n                customerId: 'SUPABASE_USER',\n                name: supabaseUser.user_metadata?.full_name || supabaseUser.email || 'Supabase User',\n                customerName: supabaseUser.user_metadata?.full_name || supabaseUser.email || 'Supabase User',\n                email: supabaseUser.email || '',\n                company: supabaseUser.user_metadata?.company || 'Your Company',\n                status: 'active',\n                isAdmin: false,\n                demoMode: false,\n                hasPersonalizedICP: true,\n                hasDetailedAnalysis: true,\n                paymentStatus: 'Completed' // Supabase users get full access\n            };\n            // Create session\n            const session = {\n                customerId: 'SUPABASE_USER',\n                accessToken: 'supabase-auth',\n                refreshToken: `supabase_refresh_${Date.now()}`,\n                expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n                customer\n            };\n            this.session = session;\n            this.saveSessionToStorage(session);\n            return {\n                success: true,\n                data: customer\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: 'Supabase authentication failed. Please try again.'\n            };\n        }\n    }\n    // Check if user is authenticated via Supabase\n    async isSupabaseAuthenticated() {\n        try {\n            const user = await (0,_supabase_client__WEBPACK_IMPORTED_MODULE_1__.getCurrentUser)();\n            return !!user;\n        } catch  {\n            return false;\n        }\n    }\n    // Enhanced login with multiple authentication patterns\n    async login(customerId, accessToken) {\n        try {\n            // Simulate API delay\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            const customer = this.getCustomerProfile(customerId);\n            if (!customer) {\n                return {\n                    success: false,\n                    error: 'Customer not found. Please check your Customer ID.'\n                };\n            }\n            // Validate admin access tokens\n            if (customer.isAdmin && accessToken) {\n                const validAdminTokens = [\n                    'admin-demo-token-2025',\n                    'test-token-123456'\n                ];\n                if (!validAdminTokens.includes(accessToken)) {\n                    return {\n                        success: false,\n                        error: 'Invalid admin access token.'\n                    };\n                }\n            }\n            // Create session\n            const session = {\n                customerId,\n                accessToken: accessToken || `token_${customerId}_${Date.now()}`,\n                refreshToken: `refresh_${customerId}_${Date.now()}`,\n                expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n                customer\n            };\n            this.session = session;\n            this.saveSessionToStorage(session);\n            return {\n                success: true,\n                data: customer\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: 'Login failed. Please try again.'\n            };\n        }\n    }\n    // Logout and clear session\n    logout() {\n        this.clearSession();\n        if (false) {}\n    }\n    // Check if user is authenticated\n    isAuthenticated() {\n        if (!this.session) return false;\n        if (this.session.expiresAt < Date.now()) {\n            this.clearSession();\n            return false;\n        }\n        return true;\n    }\n    // Get current session\n    getCurrentSession() {\n        if (!this.isAuthenticated()) return null;\n        return this.session;\n    }\n    // Get current customer\n    getCurrentCustomer() {\n        const session = this.getCurrentSession();\n        return session?.customer || null;\n    }\n    // Get customer ID\n    getCustomerId() {\n        const session = this.getCurrentSession();\n        return session?.customerId;\n    }\n    // Get access token\n    getAccessToken() {\n        const session = this.getCurrentSession();\n        return session?.accessToken;\n    }\n    // Admin access checks\n    isAdmin() {\n        const customer = this.getCurrentCustomer();\n        return customer?.isAdmin === true;\n    }\n    hasAdminAccess() {\n        const customer = this.getCurrentCustomer();\n        return customer?.isAdmin === true && customer?.adminAccess === true;\n    }\n    // Payment status checks\n    hasCompletedPayment() {\n        const customer = this.getCurrentCustomer();\n        // Admin users always have access\n        if (customer?.isAdmin) return true;\n        return customer?.paymentStatus === 'Completed';\n    }\n    // Tool access validation\n    hasToolAccess(toolName) {\n        const customer = this.getCurrentCustomer();\n        if (!customer) return false;\n        // Admin users have access to all tools\n        if (customer.isAdmin) return true;\n        // Check payment status for regular users\n        if (!this.hasCompletedPayment()) return false;\n        // Tool-specific access logic\n        switch(toolName){\n            case 'icp':\n                return customer.hasPersonalizedICP || false;\n            case 'cost-calculator':\n                return true; // Available to all paid users\n            case 'business-case':\n                return customer.hasDetailedAnalysis || false;\n            default:\n                return false;\n        }\n    }\n    // Refresh authentication token\n    async refreshToken() {\n        if (!this.session) return false;\n        try {\n            // Simulate token refresh API call\n            const newToken = `refreshed_token_${this.session.customerId}_${Date.now()}`;\n            this.session.accessToken = newToken;\n            this.session.expiresAt = Date.now() + 24 * 60 * 60 * 1000;\n            this.saveSessionToStorage(this.session);\n            return true;\n        } catch (error) {\n            console.error('Failed to refresh token:', error);\n            this.clearSession();\n            return false;\n        }\n    }\n    // Session validation and extension\n    async validateSession() {\n        if (!this.session) return false;\n        // If session expires in less than 1 hour, try to refresh\n        const oneHour = 60 * 60 * 1000;\n        if (this.session.expiresAt - Date.now() < oneHour) {\n            return await this.refreshToken();\n        }\n        return true;\n    }\n    // Get customer profiles (mock data)\n    getCustomerProfile(customerId) {\n        const profiles = {\n            'CUST_2': {\n                id: 'CUST_2',\n                customerId: 'CUST_2',\n                name: 'John Demo',\n                customerName: 'John Demo',\n                email: 'john@example.com',\n                company: 'Demo Company',\n                status: 'active',\n                isAdmin: false,\n                demoMode: false,\n                hasPersonalizedICP: true,\n                hasDetailedAnalysis: false,\n                paymentStatus: 'Completed'\n            },\n            'CUST_4': {\n                id: 'CUST_4',\n                customerId: 'CUST_4',\n                name: 'Admin Demo',\n                customerName: 'Platform Administrator',\n                email: 'admin@example.com',\n                company: 'H&S Revenue Intelligence',\n                status: 'admin',\n                isAdmin: true,\n                demoMode: true,\n                hasPersonalizedICP: true,\n                hasDetailedAnalysis: true,\n                adminAccess: true,\n                paymentStatus: 'Completed'\n            },\n            'dru78DR9789SDF862': {\n                id: 'dru78DR9789SDF862',\n                customerId: 'dru78DR9789SDF862',\n                name: 'Geter',\n                customerName: 'Geter',\n                email: 'geter@hs-platform.com',\n                company: 'H&S Platform',\n                status: 'admin',\n                isAdmin: true,\n                demoMode: true,\n                hasPersonalizedICP: true,\n                hasDetailedAnalysis: true,\n                adminAccess: true,\n                paymentStatus: 'Completed'\n            },\n            'CUST_02': {\n                id: 'CUST_02',\n                customerId: 'CUST_02',\n                name: 'Test User',\n                customerName: 'Test User',\n                email: 'test@example.com',\n                company: 'Test Company',\n                status: 'test',\n                isAdmin: false,\n                demoMode: true,\n                hasPersonalizedICP: false,\n                hasDetailedAnalysis: false,\n                paymentStatus: 'Pending'\n            }\n        };\n        return profiles[customerId] || null;\n    }\n    // Development utilities\n    isDemoMode() {\n        const customer = this.getCurrentCustomer();\n        return customer?.demoMode === true;\n    }\n    getSessionInfo() {\n        return {\n            isAuthenticated: this.isAuthenticated(),\n            customerId: this.getCustomerId(),\n            isAdmin: this.isAdmin(),\n            hasAdminAccess: this.hasAdminAccess(),\n            hasCompletedPayment: this.hasCompletedPayment(),\n            isDemoMode: this.isDemoMode(),\n            sessionExpiresAt: this.session?.expiresAt,\n            sessionValid: this.session ? this.session.expiresAt > Date.now() : false\n        };\n    }\n    // Extract credentials from URL parameters\n    extractCredentials(searchParams) {\n        const customerId = searchParams.get('customerId') || '';\n        const accessToken = searchParams.get('token') || '';\n        if (!customerId || !accessToken) {\n            return null;\n        }\n        return {\n            customerId,\n            accessToken\n        };\n    }\n    // Validate credentials using existing authentication logic\n    async validateCredentials(customerId, accessToken) {\n        try {\n            // Use existing authentication method for admin users\n            if (customerId === 'dru78DR9789SDF862' && accessToken === 'admin-demo-token-2025') {\n                const adminData = await this.getAdminProfile();\n                return {\n                    valid: true,\n                    customerData: adminData\n                };\n            }\n            // For regular customers, implement proper validation\n            // This would need integration with actual customer database\n            return {\n                valid: false,\n                error: 'Customer validation not implemented for non-admin users'\n            };\n        } catch (error) {\n            return {\n                valid: false,\n                error: `Validation failed: ${error.message}`\n            };\n        }\n    }\n    // Generate session from validated credentials\n    async generateSession(customerId, customerData) {\n        const sessionData = {\n            customerId,\n            accessToken: `token_${Date.now()}`,\n            refreshToken: `refresh_${Date.now()}`,\n            expiresAt: Date.now() + 24 * 60 * 60 * 1000,\n            customer: customerData\n        };\n        this.session = sessionData;\n        this.saveSessionToStorage();\n        return sessionData;\n    }\n    // Refresh existing session\n    async refreshSession() {\n        if (this.session && this.session.expiresAt > Date.now()) {\n            this.session.expiresAt = Date.now() + 24 * 60 * 60 * 1000; // Extend by 24 hours\n            this.saveSessionToStorage();\n        }\n    }\n}\n// Export singleton instance\nconst authService = new AuthService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (authService);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/services/authService.ts\n");

/***/ })

};
;